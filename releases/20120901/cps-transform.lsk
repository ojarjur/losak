;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Losak compiler                                                  ;;
;;                                                                 ;;
;; This stage of the compiler rewrites the program into            ;;
;; continuation passing style.                                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Copyright (C) 2004 - 2012 by Omar Jarjur                        ;;
;;                                                                 ;;
;; This program is free software; you can redistribute it and/or   ;;
;; modify it under the terms of version 2 of the GNU General       ;;
;; Public License as published by the Free Software Foundation.    ;;
;;                                                                 ;;
;; This program is distributed in the hope that it will be useful, ;;
;; but WITHOUT ANY WARRANTY; without even the implied warranty of  ;;
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   ;;
;; GNU General Public License for more details.                    ;;
;;                                                                 ;;
;; You should have received a copy of the GNU General Public       ;;
;; License along with this program; if not, write to the Free      ;;
;; Software Foundation, Inc.,                                      ;;
;; 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;
;; Error handling ;;
;;;;;;;;;;;;;;;;;;;;
(define map-to-stderr
  (foldr (fn (char output) (cons (list (cons 2 char)) output)) ()))
(define (print-warnings line-number warnings)
  (cond (warnings (map-to-stderr (append "WARNING; "
                                         "In expression beginning on line "
                                         (print line-number) ": " warnings
                                         "\n")))
        ('t ())))
(define (print-error msg) (map-to-stderr (append "Error; "msg "\n")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Utilities for preventing name collisions ;;
;; in the output of the CPS transformation  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define builtins
  '(cons car cdr null? number? symbol? function? pair?
         = < > + - * / % ~ & | ^ >> >>> <<))
(define (escape-symbols expr)
  (if (pair? expr)
      (cons (escape-symbols (car expr)) (escape-symbols (cdr expr)))
      (if (symbol? expr)
          (let ((symbol-string (symbol->string expr)))
            (if (= (car symbol-string) 95) ;; Underscore
                (string->symbol (cons 95 symbol-string))
              expr))
          expr)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CPS-Transformation functions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define initial-symbol-name "_s")

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Transform a tail call ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (transform-fn-tail-call params body next-symbol-name continuation)
  (let ((return-symbol (string->symbol next-symbol-name))
        (next-symbol-name (append next-symbol-name "0"))
        (cps-params (cons return-symbol (escape-symbols params)))
        (cps-body (transform-tail-call body next-symbol-name return-symbol)))
    `(,continuation (fn ,cps-params ,cps-body))))
(define (transform-application-tail-call op args next-symbol-name continuation)
  (let ((val-symbol (string->symbol next-symbol-name))
        (op-next-symbol-name (append next-symbol-name "0"))
        (args-next-symbol-name (append next-symbol-name "1")))
    (transform op op-next-symbol-name
               (fn (op-code)
                   (transform-args args '() args-next-symbol-name
                                   (fn (args-code)
                                       (list op-code
                                             continuation
                                             . args-code)))))))
(define (transform-primitive-tail-call op args next-symbol-name continuation)
  (transform-args args '() next-symbol-name
                  (fn (args-code) (list continuation (cons op args-code)))))
(define (transform-if-tail-call test then else next-symbol-name continuation)
  (let ((test-next-symbol-name (append next-symbol-name "0"))
        (then-next-symbol-name (append next-symbol-name "1"))
        (else-next-symbol-name (append next-symbol-name "2"))
        (then-code (transform-tail-call then then-next-symbol-name
                                        continuation))
        (else-code (transform-tail-call else else-next-symbol-name
                                        continuation)))
    (transform test test-next-symbol-name
               (fn (test-code) `(if ,test-code ,then-code ,else-code)))))
(define (transform-atom-tail-call expr next-symbol-name continuation)
  (cond ((null? expr) `(,continuation ,expr))
        ((number? expr) `(,continuation ,expr))
        ((not (member expr builtins)) `(,continuation ,(escape-symbols expr)))
        ('t (let ((return-symbol (string->symbol next-symbol-name))
                  (args-symbol (string->symbol (append next-symbol-name "0"))))
              `(,continuation
                 (fn ,(cons return-symbol args-symbol)
                      (,return-symbol ,(cons expr args-symbol))))))))
(define (transform-tail-call expr next-symbol-name continuation)
  (if (pair? expr)
      (cond ((= (car expr) 'fn)
             (transform-fn-tail-call (cadr expr) (caddr expr)
                                     next-symbol-name continuation))
            ((= (car expr) 'if)
             (transform-if-tail-call (cadr expr) (caddr expr) (cadr (cddr expr))
                                     next-symbol-name continuation))
            ((= (car expr) 'quote) `(,continuation ,expr))
            ((member (car expr) builtins)
             (transform-primitive-tail-call (car expr) (cdr expr)
                                            next-symbol-name continuation))
            ('t (transform-application-tail-call (car expr) (cdr expr)
                                                 next-symbol-name
                                                 continuation)))
      (transform-atom-tail-call expr next-symbol-name continuation)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Transform a non-tail call ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (transform-fn params body next-symbol-name builder)
  (let ((return-symbol (string->symbol next-symbol-name))
        (next-symbol-name (append next-symbol-name "0"))
        (cps-params (cons return-symbol (escape-symbols params)))
        (cps-body (transform-tail-call body next-symbol-name return-symbol)))
    (builder `(fn ,cps-params ,cps-body))))
(define (transform-args args args-code next-symbol-name builder)
  (cond ((null? args) (builder (reverse args-code)))
        ((pair? args)
         (let ((arg-symbol (string->symbol next-symbol-name))
               (arg-next-symbol-name (append next-symbol-name "0"))
               (args-next-symbol-name (append next-symbol-name "1")))
           (transform (car args) arg-next-symbol-name
                      (fn (arg-code)
                          (transform-args (cdr args)
                                          (cons arg-code args-code)
                                          args-next-symbol-name
                                          builder)))))
        ('t (let ((arg-symbol (string->symbol next-symbol-name))
                  (arg-next-symbol-name (append next-symbol-name "0")))
              (transform args arg-next-symbol-name
                         (fn (code)
                             (builder (append (reverse args-code) code))))))))
(define (transform-application op args next-symbol-name builder)
  (let ((val-symbol (string->symbol next-symbol-name))
        (op-next-symbol-name (append next-symbol-name "0"))
        (args-next-symbol-name (append next-symbol-name "1")))
    (transform op op-next-symbol-name
               (fn (op-code)
                   (transform-args args '() args-next-symbol-name
                                   (fn (args-code)
                                       (list op-code
                                             `(fn (,val-symbol)
                                                  ,(builder val-symbol))
                                             . args-code)))))))
(define (transform-primitive op args next-symbol-name builder)
  (transform-args args '() next-symbol-name
                  (fn (args-code) (builder (cons op args-code)))))
(define (transform-if test then else next-symbol-name builder)
  (let ((test-next-symbol-name (append next-symbol-name "0"))
        (then-next-symbol-name (append next-symbol-name "1"))
        (else-next-symbol-name (append next-symbol-name "2"))
        (then-code (transform then then-next-symbol-name builder))
        (else-code (transform else else-next-symbol-name builder)))
    (transform test test-next-symbol-name
               (fn (test-code) `(if ,test-code ,then-code ,else-code)))))
(define (transform-atom expr next-symbol-name builder)
  (cond ((null? expr) (builder expr))
        ((number? expr) (builder expr))
        ((not (member expr builtins))
         (builder (escape-symbols expr)))
        ('t (let ((return-symbol-name (append next-symbol-name "0"))
                  (args-symbol-name (append next-symbol-name "1"))
                  (return-symbol (string->symbol return-symbol-name))
                  (args-symbol (string->symbol args-symbol-name)))
              (builder `(fn ,(cons return-symbol args-symbol)
                            (,return-symbol ,(cons expr args-symbol))))))))
(define (transform expr next-symbol-name builder)
  (if (pair? expr)
      (cond ((= (car expr) 'fn)
             (transform-fn (cadr expr) (caddr expr) next-symbol-name builder))
            ((= (car expr) 'if)
             (transform-if (cadr expr) (caddr expr) (cadddr expr)
                           next-symbol-name builder))
            ((= (car expr) 'quote) (builder expr))
            ((member (car expr) builtins)
             (transform-primitive (car expr) (cdr expr)
                                  next-symbol-name builder))
            ('t (transform-application (car expr) (cdr expr) next-symbol-name
                                       builder)))
      (transform-atom expr next-symbol-name builder)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Compile expressions to CPS ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (cps-transformation expr)
  (transform expr initial-symbol-name
             (fn (expr-code) expr-code)))
(define (transform-statement statement)
  (if (= (car statement) 'define)
      `(define ,(escape-symbols (cadr statement))
         ,(cps-transformation (caddr statement)))
      `(_top-level-return ,(cps-transformation statement))))

;;;;;;;;;;;;;;;;;;;;;;;
;; Compile the input ;;
;;;;;;;;;;;;;;;;;;;;;;;
(define (read-expr cont line-number)
  (parse-expr cont (fn (error-message end-line)
                       (print-error (append "Parse error, line "
                                            (print end-line)
                                            ": " error-message "\n")))
              line-number))
(define (compile-source start-line-number)
  (fn (value end-line-number)
      (cond ((not value)
             (print-error "No main expression"))
            ((not (= (car value) 'define))
             (append (print '(define _wrap-output
                               (fn (expr return)
                                   (if (pair? expr)
                                       (_wrap-output (cdr expr)
                                                     (fn (output-tail)
                                                         (return (cons (car expr)
                                                                       output-tail))))
                                       (return (if (function? expr)
                                                   (fn args
                                                       (expr _top-level-return . args))
                                                   expr))))))
                     "\n"
                     (print '(define _top-level-return
                               (fn (expr) (_wrap-output expr (fn (x) x)))))
                     "\n"
                     (print (transform-statement value))
                     "\n"))
            ((and (pair? (cadr value)) (pair? (caadr value)))
             (print-error "Malformed define statement"))
            ('t (append (print (transform-statement value))
                        "\n"
                        (read-expr (compile-source end-line-number)
                                   end-line-number))))))
(fn (size arguments) (read-expr (compile-source 1) 1))
