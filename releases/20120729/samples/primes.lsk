;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Sample LOSAK program that computes the Nth prime number ;;
;; using sieve built from chaining filtering threads       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (unfold test head tail)
  (fn (expr)
      (if (test expr)
          '()
          (cons (head expr) ((unfold test head tail) (tail expr))))))
(define (string->number chars)
  (if (atom chars)
      '()
      ((foldl (fn (char value)
                  (if (and value (> char 47) (< char 58))
                      (+ (- char 48) (* 10 value))
                      '()))
              0)
       chars)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions for inter-process I/O ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (fork id space child continuation)
  (cons (list id space child) continuation))
(define (send-to-parent msg continuation)
  (cons (list msg) continuation))
(define (send-to-child child-id msg continuation)
  (cons (list child-id msg) continuation))

;;;;;;;;;;;;;;;;;;;;;;;;
;; Processing threads ;;
;;;;;;;;;;;;;;;;;;;;;;;;
(define (prime-filter value)
  (fn (msg)
      (if (number msg)
          (if (= (% msg value) 0)
              (prime-filter value)
              (send-to-child 'next msg (prime-filter value)))
          (send-to-parent msg (prime-filter value)))))
(define (filter-thread space)
  (fn (msg)
      (send-to-parent (cons 'prime msg)
                      (fork 'next 100
                            filter-thread
                            (prime-filter msg)))))

(define (generator next-value)
  (fn (trigger)
      (send-to-parent (cons 'next next-value) (generator (+ next-value 1)))))
(define (generator-thread space) (generator 2))

(define (main-loop prime-count)
  (fn (msg)
      (cond ((= (car msg) 'next)
             (send-to-child 'filters (cdr msg)
                            (send-to-child 'generator 'next
                                           (main-loop prime-count))))
            ((= (car msg) 'prime)
             (if (> prime-count 0)
                 (append (print (cdr msg))
                         ", "
                         (main-loop (- prime-count 1)))
                 (append (print (cdr msg)) "]\n")))
            ('t (main-loop prime-count)))))

;;;;;;;;;;;;;;;;;;;;;;
;; Entry-point code ;;
;;;;;;;;;;;;;;;;;;;;;;
(define usage-string "USAGE: primes <NUMBER-OF-PRIMES>\n")
(fn (space args)
    (if (atom (cdr args))
        usage-string
        (let ((prime-count (string->number (car (cdr args)))))
          (if prime-count
              (append "["
                      (fork 'filters 100 filter-thread
                            (fork 'generator 100 generator-thread
                                  (send-to-child 'generator 'next
                                                 (main-loop prime-count)))))
              usage-string))))
