;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions for escaping symbols ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (escape-symbols expr)
  (if (pair? expr)
      (cons (escape-symbols (car expr))
            (escape-symbols (cdr expr)))
      (if (symbol? expr)
          (let ((symbol-string (symbol->string expr)))
            (if (= (car symbol-string) 95)
                (string->symbol (cons 95 symbol-string))
                expr))
          expr)))
(define (escape-statement-list statements)
  (if (pair? statements)
      (cons (escape-statement (car statements))
            (escape-statement-list (cdr statements)))
      (escape-statement statements)))
(define (escape-statement expr)
  (cond ((null? expr) expr)
        ((number? expr) expr)
        ((symbol? expr) (escape-symbols expr))
        ((= (car expr) 'quote) expr)
        ((= (car expr) 'if)
         `(if ,(escape-statement (cadr expr))
              ,(escape-statement (caddr expr))
              ,(escape-statement (cadr (cddr expr)))))
        ((= (car expr) 'fn)
         `(fn ,(escape-symbols (cadr expr)) ,(escape-statement (caddr expr))))
        ((= (car expr) 'define)
         `(define ,(escape-symbols (get-name expr))
            ,(escape-statement (get-body expr))))
        ('t (escape-statement-list expr))))
