;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Losak compiler                                                  ;;
;;                                                                 ;;
;; This front-end to the compiler removes syntactic sugar and      ;;
;; warns about potential programming errors.                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Copyright (C) 2004 - 2012 by Omar Jarjur                        ;;
;;                                                                 ;;
;; This program is free software; you can redistribute it and/or   ;;
;; modify it under the terms of version 2 of the GNU General       ;;
;; Public License as published by the Free Software Foundation.    ;;
;;                                                                 ;;
;; This program is distributed in the hope that it will be useful, ;;
;; but WITHOUT ANY WARRANTY; without even the implied warranty of  ;;
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   ;;
;; GNU General Public License for more details.                    ;;
;;                                                                 ;;
;; You should have received a copy of the GNU General Public       ;;
;; License along with this program; if not, write to the Free      ;;
;; Software Foundation, Inc.,                                      ;;
;; 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(load "src/context.lsk")
(load "src/escape.lsk")
(load "src/util.lsk")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions to remove syntactic sugar ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (desugar-var var env context return)
  (cond ((member var (flatten env (get-globals context)))
         (return '() (escape-symbols var) "" context))
        ((member var supported-builtins)
         (return '() var "" context))
        ((member var special-forms)
         (return '() var "" context))
        ('t (standard-library var
                              (fn (val)
                                  (return '() var "" context))
                              (fn ()
                                  (return '() '()
                                           (append "Unknown var \""
                                                   (symbol->string var)
                                                   "\" will evaluate to NIL.")
                                           context))))))
(define (desugar-quote expr context return)
  (if (pair? (cadr expr))
      (let (((literal-symbol context)
             (get-next-symbol context list)))
        (return `((define ,literal-symbol ,expr))
                 literal-symbol
                 ""
                 context))
      (return '() expr "" context)))
(define (rewrite-quasiquote expression depth env context return)
  (cond ((number? expression) (return '() expression "" context))
        ((or (null? expression) (symbol? expression))
         (return '() (list 'quote expression) "" context))
        ((= (car expression) 'unquote)
         (cond ((= depth 0)
                (desugar-expr (cadr expression) env context return))
               ('t (rewrite-quasiquote (cadr expression) (- depth 1)
                                       env context
                                       (fn (definitions body warnings context)
                                           (return definitions
                                                   (list 'unquote body)
                                                   warnings
                                                   context))))))
        ((= (car expression) 'quasiquote)
         (rewrite-quasiquote (cadr expression) (+ depth 1) env context
                             (fn (definitions body warnings context)
                                 (return definitions
                                         (list 'quasiquote body)
                                         warnings
                                         context))))
        ('t (let (((car-definitions car-body car-warnings context)
                   (rewrite-quasiquote (car expression) depth env context list))
                  ((cdr-definitions cdr-body cdr-warnings context)
                   (rewrite-quasiquote (cdr expression) depth
                                       env context list)))
              (return (append car-definitions cdr-definitions)
                      (list 'cons car-body cdr-body)
                      (append car-warnings cdr-warnings)
                      context)))))
(define (always-true expr)
  (cond ((number? expr) 't)
        ((pair? expr)
         (if (= (car expr) 'quote)
             (not (null? (cdr expr)))
             '()))
        ('t '())))
(define (rewrite-cond cases env context return)
  (cond ((always-true (caar cases))
         (desugar-expr (cadar cases) env context return))
        ((pair? cases)
         (let (((test-definitions test-body test-warnings context)
                (desugar-expr (caar cases) env context list))
               ((then-definitions then-body then-warnings context)
                (desugar-expr (cadar cases) env context list))
               ((else-definitions else-body else-warnings context)
                (rewrite-cond (cdr cases) env context list)))
           (return (append test-definitions
                           then-definitions
                           else-definitions)
                   (list 'if test-body then-body else-body)
                   (append test-warnings
                           then-warnings
                           else-warnings)
                   context)))
        ('t (return '() '() "Unhandled cond default. " context))))
(define (rewrite-let bindings expr)
  (if (pair? bindings)
      (list (list 'fn (list (caar bindings))
                   (rewrite-let (cdr bindings) expr))
            (cadar bindings))
      expr))
(define (desugar-args args env context return)
  (if (pair? args)
      (let (((arg-definitions arg-body arg-warnings context)
             (desugar-expr (car args) env context list))
            ((args-definitions args-body args-warnings context)
             (desugar-args (cdr args) env context list)))
        (return (append arg-definitions args-definitions)
                (cons arg-body args-body)
                (append arg-warnings args-warnings)
                context))
      (desugar-expr args env context return)))
(define (desugar-expr expr env context return)
  (cond ((symbol? expr) (desugar-var expr env context return))
        ((or (null? expr) (number? expr))
         (return '() expr "" context))
        ((= (car expr) 'quote) (desugar-quote expr context return))
        ((= (car expr) 'quasiquote)
         (rewrite-quasiquote (cadr expr) 0 env context return))
        ((= (car expr) 'unquote)
         (desugar-expr (cadr expr) env context
                       (fn (definitions body warnings context)
                           (return definitions
                                   body
                                   (append "Unquote outside of quasiquote"
                                           warnings)
                                   context))))
        ((= (car expr) 'cond)
         (rewrite-cond (cdr expr) env context return))
        ((= (car expr) 'let)
         (desugar-expr (rewrite-let (cadr expr) (caddr expr))
                       env context return))
        ((= (car expr) 'fn)
         (desugar-expr (caddr expr) (cons (cadr expr) env) context
                       (fn (definitions body warnings context)
                           (return definitions
                                   (list 'fn (escape-symbols (cadr expr)) body)
                                   warnings
                                   context))))
        ('t (desugar-args expr env context return))))
