;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Losak compiler                                                  ;;
;;                                                                 ;;
;; This intermediated-stage of the compiler builds a compile-time  ;;
;; symbol table and adds primitives for converting between symbols ;;
;; and strings. The actual primitives that are defined here are:   ;;
;;   symbol?                                                       ;;
;;   symbol->string                                                ;;
;;   string->symbol                                                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Copyright (C) 2004 - 2012 by Omar Jarjur                        ;;
;;                                                                 ;;
;; This program is free software; you can redistribute it and/or   ;;
;; modify it under the terms of version 2 of the GNU General       ;;
;; Public License as published by the Free Software Foundation.    ;;
;;                                                                 ;;
;; This program is distributed in the hope that it will be useful, ;;
;; but WITHOUT ANY WARRANTY; without even the implied warranty of  ;;
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   ;;
;; GNU General Public License for more details.                    ;;
;;                                                                 ;;
;; You should have received a copy of the GNU General Public       ;;
;; License along with this program; if not, write to the Free      ;;
;; Software Foundation, Inc.,                                      ;;
;; 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(load "src/error-handling.lsk")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Helper functions for escaping symbols ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (escape-args-for-symbol-table args)
  (if (pair? args)
      (cons (escape-for-symbol-table (car args))
            (escape-args-for-symbol-table (cdr args)))
      (escape-for-symbol-table args)))
(define (escape-for-symbol-table expr)
  (cond ((null? expr) expr)
        ((number? expr) expr)
        ((= expr '=) '_=)
        ((= expr 'equal) '_equal)
        ((= expr 'symbol?) '_symbol?)
        ((= expr 'pair?) '_pair?)
        ((= expr 'car) '_car)
        ((= expr 'cdr) '_cdr)
        ((= expr 'symbol-tag) '_symbol-tag)
        ((symbol? expr)
         (let ((symbol-string (symbol->string expr)))
           (if (= (car symbol-string) 95) ;; Underscore
               (string->symbol (cons 95 symbol-string))
               expr)))
        ('t (escape-args-for-symbol-table expr))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions for maintaining the symbol table ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (build-string->symbol-cases symbols)
  (if (null? symbols)
      `(cons 'symbol-tag chars)
      (let ((next-symbol (car symbols))
            (next-symbol-string (print next-symbol)))
        `(if (equal chars ',next-symbol-string)
             ',(escape-for-symbol-table next-symbol)
             ,(build-string->symbol-cases (cdr symbols))))))
(define (build-string->symbol symbols)
  `(define string->symbol
     (fn (chars)
         ,(build-string->symbol-cases symbols))))
(define (build-symbol->string-cases symbols)
  (if (null? symbols)
      '()
      (let ((next-symbol (car symbols))
            (next-symbol-string (print next-symbol)))
        `(if (= symbol ',(escape-for-symbol-table next-symbol))
             ',next-symbol-string
             ,(build-symbol->string-cases (cdr symbols))))))
(define (build-symbol->string symbols)
  `(define symbol->string
     (fn (symbol)
         (if (pair? symbol)
             (if (equal (car symbol) 'symbol-tag)
                 (cdr symbol)
                 ())
             ,(build-symbol->string-cases symbols)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions to insert symbol-handling ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (list-symbols expression result)
  (cond ((pair? expression)
         (list-symbols (car expression)
                       (list-symbols (cdr expression) result)))
        ((symbol? expression)
         (if (member expression result)
             result
             (cons expression result)))
        ('t result)))
(define (find-quoted-symbols expressions result)
  (cond ((not (pair? expressions)) result)
        ((= (car expressions) 'quote)
         (list-symbols (cadr expressions) result))
        ('t ((foldr (fn (expression result)
                        (find-quoted-symbols expression result))
                    result)
             expressions))))
(define (compile definitions expr symbols)
  (if (or (member 'symbol->string symbols)
          (member 'string->symbol symbols))
      (let ((quoted-symbols (find-quoted-symbols (cons expr definitions) '()))
            (continuation ((foldr (fn (expr cont)
                                      (append (print (escape-for-symbol-table expr))
                                              cont))
                                  (print (escape-for-symbol-table expr)))
                           definitions)))
        ((foldr (fn (definition continuation)
                    (append (print definition)
                            continuation))
                continuation)
         `((define equal
             (fn (x y)
                 (if (pair? x)
                     (if (pair? y)
                         (if (equal (car x) (car y))
                             (equal (cdr x) (cdr y))
                           '())
                       '())
                   (= x y))))
           ,(build-symbol->string quoted-symbols)
           ,(build-string->symbol quoted-symbols)
           (define _symbol?
             (fn (expr)
                 (if (null? expr)
                     '()
                   (if (number? expr)
                       '()
                     (if (function? expr)
                         '()
                       (if (pair? expr)
                           (if (= (car expr) 'symbol-tag)
                               't
                             '())
                         't))))))
           (define _pair?
             (fn (expr)
                 (if (pair? expr)
                     (if (= (car expr) 'symbol-tag)
                         '()
                       't)
                   '())))
           (define _car
             (fn (expr)
                 (if (= (car expr) 'symbol-tag)
                     '()
                   (car expr))))
           (define _cdr
             (fn (expr)
                 (if (= (car expr) 'symbol-tag)
                     '()
                   (cdr expr))))
           (define _=
             (fn (x y)
                 (if (_pair? x)
                     '()
                   (equal x y)))))))
      (append (apply append (map print definitions))
              (print expr))))

;;;;;;;;;;;;;;;;;;;;;;;
;; Compile the input ;;
;;;;;;;;;;;;;;;;;;;;;;;
(define (read-expr cont line-number)
  (parse-expr cont (fn (error-message end-line)
                       (print-error (append "Parse error, line "
                                            (print end-line)
                                            ": " error-message "\n")))
              line-number))
(define (compile-source definitions start-line-number symbols)
  (fn (value end-line-number peeked-char)
      (cond ((not value)
             (print-error "No main expression"))
            ((not (= (car value) 'define))
             (compile (reverse definitions)
                      value
                      (list-symbols value symbols)))
            ((not (or (symbol? (cadr value)) (symbol? (caadr value))))
             (print-error "Malformed define statement"))
            ('t ((read-expr (compile-source (cons value definitions)
                                            end-line-number
                                            (list-symbols value symbols))
                            end-line-number)
                 peeked-char)))))
(fn (size arguments) (read-expr (compile-source '() 1 '()) '() 1))
