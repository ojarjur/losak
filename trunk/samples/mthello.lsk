;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This sample program demonstrates forking a child process. ;;
;; The running program consists of two processes; a child    ;;
;; process that sends the hello-world string to its parent,  ;;
;; and a parent process that simply forwards messages from   ;;
;; its children.                                             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (list . x) x)
(define (fork child continuation)
  (cons (list 1 100 child) continuation))

;; The child process
(define (hello space) "Hello, World!\n")

;; The parent process. It exits after reading a newline
(define (forward . input)
  (cond ((= input 10) (list input))
        ('t (cons input forward))))

;; The main loop
(define (main space args) (fork hello forward))
main
