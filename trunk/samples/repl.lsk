;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; repl.lsk : Multitasking LOSAK Read-Eval-Print loop              ;;
;; Copyright (C) 2004 - 2012 by Omar Jarjur                        ;;
;;                                                                 ;;
;; This program is free software; you can redistribute it and/or   ;;
;; modify it under the terms of version 2 of the GNU General       ;;
;; Public License as published by the Free Software Foundation.    ;;
;;                                                                 ;;
;; This program is distributed in the hope that it will be useful, ;;
;; but WITHOUT ANY WARRANTY; without even the implied warranty of  ;;
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   ;;
;; GNU General Public License for more details.                    ;;
;;                                                                 ;;
;; You should have received a copy of the GNU General Public       ;;
;; License along with this program; if not, write to the Free      ;;
;; Software Foundation, Inc.,                                      ;;
;; 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (walk head tail test merge ret)
  (fn (tree)
      (cond ((test tree) (ret tree))
            ('t (merge (head tree)
                       ((walk head tail test merge ret)
                        (tail tree)))))))
(define (length list) ((foldr (fn (x y) (+ 1 y)) 0) list))
(define (add . args) ((foldr + 0) args))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions to parse an s-expression ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define initial-reader
  (parse-expr (fn (expression line-number)
                  (list 'read expression))
              (fn (error-message error-line-number)
                  (fn (char)
                      (list 'error (append "Parse error, line "
                                           (print error-line-number)
                                           ": " error-message))))
              1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions to represent evaluated expressions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (NULL null-handler number-handler symbol-handler function-handler pair-handler)
  (null-handler))
(define (NUMBER val)
  (fn (null-handler number-handler symbol-handler function-handler pair-handler)
      (number-handler val)))
(define (SYMBOL val)
  (let ((symbol-size (length (symbol->string val))))
    (fn (null-handler number-handler symbol-handler function-handler pair-handler)
        (symbol-handler val symbol-size))))
(define (FUNCTION val size)
  (fn (null-handler number-handler symbol-handler function-handler pair-handler)
      (function-handler val size)))
(define (PAIR head tail)
  (let ((pair-size (+ 1 (+ (size head) (size tail)))))
    (fn (null-handler number-handler symbol-handler function-handler pair-handler)
        (pair-handler head tail pair-size))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions to print evaluated s-expressions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (expr->string expr)
  (expr (fn () "()")
        (fn (num) (print num))
        (fn (symbol symbol-size) (symbol->string symbol))
        (fn (fun function-size) "<FUNCTION>")
        (fn (head tail pair-size)
            (let ((head-string (expr->string head))
                  (tail-string (expr->string tail)))
              (cond ((equal tail-string "()")
                     (append "(" head-string ")"))
                    ((= (car tail-string) 40)
                     (append "(" head-string " " (cdr tail-string)))
                    ('t (append "(" head-string " . " tail-string ")")))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions for processing an evaluated expression ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (size expr)
  (expr (fn () 0)
        (fn (num) 1)
        (fn (sym size) size)
        (fn (fun size) size)
        (fn (head tail size) size)))
(define (not-null? expr)
  (expr (fn () '())
        (fn (num) 't)
        (fn (sym size) 't)
        (fn (fun size) 't)
        (fn (head tail size) 't)))
(define (get-head expr)
  (expr (fn () NULL)
        (fn (num) NULL)
        (fn (sym size) NULL)
        (fn (fun size) NULL)
        (fn (head tail size) head)))
(define (get-tail expr)
  (expr (fn () NULL)
        (fn (num) NULL)
        (fn (sym size) NULL)
        (fn (fun size) NULL)
        (fn (head tail size) tail)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Helper functions for evaluation of primitive operations ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define TRUE (SYMBOL 't))
(define (pair-operation op)
  (fn (args globals mem cont error)
      (cont ((get-head args) (fn () NULL)
                             (fn (num) NULL)
                             (fn (sym size) NULL)
                             (fn (fun size) NULL)
                             (fn (head tail size) (op (cons head tail)))))))
(define (unary-operation op)
  (fn (args globals mem cont error)
      (cont ((get-head args) (fn () NULL)
                             (fn (num) (NUMBER (op num)))
                             (fn (sym size) NULL)
                             (fn (fun size) NULL)
                             (fn (head tail size) NULL)))))
(define (numerical-operation op)
  (fn (args globals mem cont error)
      ((get-head args) (fn () (cont NULL))
                       (fn (num1)
                           ((unary-operation (fn (num2) (op num1 num2)))
                            (get-tail args) globals mem cont error))
                       (fn (sym size) (cont NULL))
                       (fn (fun size) (cont NULL))
                       (fn (head tail size) (cont NULL)))))
(define (boolean-operation op)
  (fn (args globals mem cont error)
      (let ((arg1 (get-head args))
            (arg2 (get-head (get-tail args))))
        (arg1 (fn () (cont NULL))
              (fn (num1)
                  (cont (arg2 (fn () NULL)
                              (fn (num2) (cond ((op num1 num2) TRUE)
                                               ('t NULL)))
                              (fn (sym size) NULL)
                              (fn (fun size) NULL)
                              (fn (head tail size) NULL))))
              (fn (sym1 size) (cont NULL))
              (fn (fun size) (cont NULL))
              (fn (head tail size) (cont NULL))))))
(define (equals-test args globals mem cont error)
  (let ((arg1 (get-head args))
        (arg2 (get-head (get-tail args))))
    (arg1 (fn () (cont NULL))
          (fn (num1)
              (cont (arg2 (fn () NULL)
                          (fn (num2) (cond ((= num1 num2) TRUE) ('t NULL)))
                          (fn (sym size) NULL)
                          (fn (fun size) NULL)
                          (fn (head tail size) NULL))))
          (fn (sym1 size)
              (cont (arg2 (fn () NULL)
                          (fn (num) NULL)
                          (fn (sym2 size)
                              (cond ((= sym1 sym2) TRUE) ('t NULL)))
                          (fn (fun size) NULL)
                          (fn (head tail size) NULL))))
          (fn (fun size) (cont NULL))
          (fn (head tail size) (cont NULL)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Interpreter for lambda-calculus expressions                               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Processes are compiled into these expressions and it is the               ;;
;; lambda-calculus interpreter that enforces the rules of memory protection. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (wrap-literal val)
  (cond ((number? val) (NUMBER val))
        ((symbol? val) (SYMBOL val))
        ((null? val) NULL)
        ('t (PAIR (wrap-literal (car val)) (wrap-literal (cdr val))))))
(define (LIT val)
  (let ((wrapped-val (wrap-literal val)))
    (fn (env globals mem cont error)
        (cont wrapped-val))))
(define (FIND var)
  (fn (env globals mem cont error)
      (cont (lookup var env globals))))
(define (LAMBDA params body)
  (fn (env globals mem cont error)
      (cont (FUNCTION (fn (args globals mem cont error)
                          (if (> mem (+ (size env) (size args)))
                              (body (bind params args env)
                                    globals mem cont error)
                              (error "Out of memory")))
                      (+ 1 (size env))))))
(define (IF test then else)
  (fn (env globals mem cont error)
      (if (> mem (+ 1 (size env)))
          (test env globals (- mem 1)
                (fn (result) ((cond ((not-null? result) then)
                                    ('t else))
                              env globals mem cont error))
                error)
          (error "Out of memory"))))
(define (APPLY op args)
  (fn (env globals mem cont error)
      (if (> mem (+ 1 (size env)))
          (args env globals mem
                (fn (args-val)
                    (op env globals (- mem (size args-val))
                        (fn (op-val)
                            (op-val (fn () (cont NULL))
                                    (fn (num) (cont NULL))
                                    (fn (sym size) (cont NULL))
                                    (fn (fun size)
                                        (fun args-val globals mem cont error))
                                    (fn (head tail) (cont NULL))))
                        error))
                error)
          (error "Out of memory"))))
(define (CONS arg1 arg2)
  (fn (env globals mem cont error)
      (if (> mem (+ 1 (size env)))
          (arg2 env globals (- mem 1)
                (fn (arg2-val)
                    (arg1 env globals
                          (- mem (+ 1 (size arg2-val)))
                          (fn (arg1-val) (cont (PAIR arg1-val arg2-val)))
                          error))
                error)
          (error "Out of memory"))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Compiler from s-expressions to lambda terms ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define compile-cond (foldr (fn (case else) (IF (compile (car case))
                                                (compile (cadr case))
                                                else))
                            (LIT '())))
(define (compile-let bindings body)
  (compile ((foldr (fn (binding expr)
                       (list (list 'fn (list (car binding)) expr)
                             (cadr binding)))
                   body)
            bindings)))
(define compile-args
  (walk car cdr (fn (x) (not (pair? x)))
        (fn (arg arg_list) (CONS (compile arg) arg_list))
        (fn (args) (compile args))))
(define (compile expr env)
  (cond ((symbol? expr) (FIND expr))
        ((number? expr) (LIT expr))
        ((null? expr) (LIT '()))
        ((= (car expr) 'quote) (LIT (cadr expr)))
        ((= (car expr) 'cond) (compile-cond (cdr expr)))
        ((= (car expr) 'if) (IF (compile (cadr expr))
                                (compile (caddr expr))
                                (compile (cadddr expr))))
        ((= (car expr) 'let) (compile-let (cadr expr) (caddr expr)))
        ((= (car expr) 'fn) (LAMBDA (cadr expr) (compile (caddr expr))))
        ('t (APPLY (compile (car expr))
                   (compile-args (cdr expr))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Binding environment functions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define initial-globals
  (let ((cons-value (FUNCTION (fn (args globals mem cont error)
                                  (cont (PAIR (get-head args)
                                              (get-head (get-tail args)))))
                              1))
        (car-value (FUNCTION (pair-operation car) 1))
        (cdr-value (FUNCTION (pair-operation cdr) 1))
        (=-value (FUNCTION equals-test 1))
        (<-value (FUNCTION (boolean-operation <) 1))
        (>-value (FUNCTION (boolean-operation >) 1))
        (+-value (FUNCTION (numerical-operation +) 1))
        (--value (FUNCTION (fn (args globals mem cont error)
                               ((if (get-tail args)
                                    (numerical-operation -)
                                    (unary-operation -))
                                args globals mem cont error))
                           1))
        (*-value (FUNCTION (numerical-operation *) 1))
        (/-value (FUNCTION (numerical-operation /) 1))
        (%-value (FUNCTION (numerical-operation %) 1))
        (>>-value (FUNCTION (numerical-operation >>) 1))
        (>>>-value (FUNCTION (numerical-operation >>>) 1))
        (<<-value (FUNCTION (numerical-operation <<) 1))
        (~-value (FUNCTION (unary-operation ~) 1))
        (&-value (FUNCTION (numerical-operation &) 1))
        (^-value (FUNCTION (numerical-operation ^) 1))
        (|-value (FUNCTION (numerical-operation |) 1))
        (null-value (FUNCTION (fn (args globals mem cont error)
                                  (cont ((get-head args)
                                         (fn () TRUE)
                                         (fn (num) NULL)
                                         (fn (sym size) NULL)
                                         (fn (fun size) NULL)
                                         (fn (head tail size) NULL))))
                              1))
        (atom-value (FUNCTION (fn (args globals mem cont error)
                                  (cont ((get-head args)
                                         (fn () TRUE)
                                         (fn (num) TRUE)
                                         (fn (sym size) TRUE)
                                         (fn (fun size) TRUE)
                                         (fn (head tail size) NULL))))
                              1))
        (pair-value (FUNCTION (fn (args globals mem cont error)
                                  (cont ((get-head args)
                                         (fn () NULL)
                                         (fn (num) NULL)
                                         (fn (sym size) NULL)
                                         (fn (fun size) NULL)
                                         (fn (head tail size) TRUE))))
                              1))
        (function-value (FUNCTION (fn (args globals mem cont error)
                                      (cont ((get-head args)
                                             (fn () NULL)
                                             (fn (num) NULL)
                                             (fn (sym size) NULL)
                                             (fn (fun size) TRUE)
                                             (fn (head tail size) NULL))))
                                  1))
        (symbol-value (FUNCTION (fn (args globals mem cont error)
                                    (cont ((get-head args)
                                           (fn () NULL)
                                           (fn (num) NULL)
                                           (fn (sym size) TRUE)
                                           (fn (fun size) NULL)
                                           (fn (head tail size) NULL))))
                                1))
        (number-value (FUNCTION (fn (args globals mem cont error)
                                    (cont ((get-head args)
                                           (fn () NULL)
                                           (fn (num) TRUE)
                                           (fn (sym size) NULL)
                                           (fn (fun size) NULL)
                                           (fn (head tail size) NULL))))
                                1)))
    (fn (var)
        (cond ((= var 'cons) cons-value)
              ((= var 'car) car-value)
              ((= var 'cdr) cdr-value)
              ((= var '=) =-value)
              ((= var '<) <-value)
              ((= var '>) >-value)
              ((= var '+) +-value)
              ((= var '-) --value)
              ((= var '*) *-value)
              ((= var '/) /-value)
              ((= var '%) %-value)
              ((= var '>>) >>-value)
              ((= var '>>>) >>>-value)
              ((= var '<<) <<-value)
              ((= var '&) &-value)
              ((= var '^) ^-value)
              ((= var '|) |-value)
              ((= var 'null?) null-value)
              ((= var 'atom) atom-value)
              ((or (= var 'function?) (= var 'function))
               function-value)
              ((or (= var 'number?) (= var 'number))
               number-value)
              ((= var 'symbol?) symbol-value)
              ((= var 'pair?) pair-value)
              ('t NULL)))))

(define (add-global name val globals)
  (fn (var) (cond ((= var name) val)
                  ('t (globals var)))))
(define empty-env (FUNCTION (fn (var globals) (globals var)) 0))
(define (lookup var env globals)
  (env (fn () (globals var))
       (fn (num) (globals var))
       (fn (sym size) (globals var))
       (fn (fun size) (fun var globals))
       (fn (head tail size) (globals var))))
(define (bind params val env)
  (cond ((null? params) env)
        ((pair? params)
         (bind (car params) (get-head val)
               (bind (cdr params) (get-tail val) env)))
        ('t (FUNCTION (fn (var globals)
                          (cond ((= var params) val)
                                ('t (lookup var env globals))))
                      (+ (size env) (size val))))))

(define (eval expr globals space return error-return)
  ((compile expr) empty-env globals space return error-return))
(define (definition-return name)
  (fn (value) (send-to-parent (list name 'define value) '())))
(define (expression-return id)
  (fn (value) (send-to-parent (list id 'done (expr->string value)) '())))
(define (error-return id)
  (fn (message)
      (send-to-parent (list id 'done (append "Error: " message)) '())))
(define (definition-name definition)
  (if (pair? (cadr definition))
      (caadr definition)
      (cadr definition)))
(define (definition-body definition)
  (if (pair? (cadr definition))
      (list 'fn (cdr (cadr definition)) (caddr definition))
      (caddr definition)))
(define (evaluator id expr globals)
  (fn (space) (cond ((= (car expr) 'define)
                     (eval (definition-body expr) globals space
                           (definition-return (definition-name expr))
                           (error-return id)))
                    ('t (eval expr globals space
                              (expression-return id)
                              (error-return id))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions for inter-process I/O ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (fork id space child continuation)
  (cons (list id space child) continuation))
(define (send-to-parent msg continuation)
  (cons (list msg) continuation))
(define (send-to-child child-id msg continuation)
  (cons (list child-id msg) continuation))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions to perform system I/O ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (qwerty key shift)
  (cond ((or (= key 170) (= key 182)) (cons () ()))
        ((or (= key 42) (= key 54)) (cons () 't))
        ((= key 1) (cons 'escape shift))
        ((= key 2) (cons (cond (shift 33) ('t 49)) shift))
        ((= key 3) (cons (cond (shift 64) ('t 50)) shift))
        ((= key 4) (cons (cond (shift 35) ('t 51)) shift))
        ((= key 5) (cons (cond (shift 36) ('t 52)) shift))
        ((= key 6) (cons (cond (shift 37) ('t 53)) shift))
        ((= key 7) (cons (cond (shift 94) ('t 54)) shift))
        ((= key 8) (cons (cond (shift 38) ('t 55)) shift))
        ((= key 9) (cons (cond (shift 42) ('t 56)) shift))
        ((= key 10) (cons (cond (shift 40) ('t 57)) shift))
        ((= key 11) (cons (cond (shift 41) ('t 48)) shift))
        ((= key 12) (cons (cond (shift 95) ('t 45)) shift))
        ((= key 13) (cons (cond (shift 43) ('t 61)) shift))
        ((= key 14) (cons 'backspace shift))
        ((= key 15) (cons 'tab shift))
        ((= key 16) (cons (cond (shift 81) ('t 113)) shift))
        ((= key 17) (cons (cond (shift 87) ('t 119)) shift))
        ((= key 18) (cons (cond (shift 69) ('t 101)) shift))
        ((= key 19) (cons (cond (shift 82) ('t 114)) shift))
        ((= key 20) (cons (cond (shift 84) ('t 116)) shift))
        ((= key 21) (cons (cond (shift 89) ('t 121)) shift))
        ((= key 22) (cons (cond (shift 85) ('t 117)) shift))
        ((= key 23) (cons (cond (shift 73) ('t 105)) shift))
        ((= key 24) (cons (cond (shift 79) ('t 111)) shift))
        ((= key 25) (cons (cond (shift 80) ('t 112)) shift))
        ((= key 26) (cons (cond (shift 123) ('t 91)) shift))
        ((= key 27) (cons (cond (shift 125) ('t 93)) shift))
        ((or (= key 28) (= key 86)) (cons 'enter shift))
        ((or (= key 29) (= key 87)) (cons 'control shift))
        ((= key 30) (cons (cond (shift 65) ('t 97)) shift))
        ((= key 31) (cons (cond (shift 83) ('t 115)) shift))
        ((= key 32) (cons (cond (shift 68) ('t 100)) shift))
        ((= key 33) (cons (cond (shift 70) ('t 102)) shift))
        ((= key 34) (cons (cond (shift 71) ('t 103)) shift))
        ((= key 35) (cons (cond (shift 72) ('t 104)) shift))
        ((= key 36) (cons (cond (shift 74) ('t 106)) shift))
        ((= key 37) (cons (cond (shift 75) ('t 107)) shift))
        ((= key 38) (cons (cond (shift 76) ('t 108)) shift))
        ((= key 39) (cons (cond (shift 58) ('t 59)) shift))
        ((= key 40) (cons (cond (shift 34) ('t 39)) shift))
        ((= key 41) (cons (cond (shift 126) ('t 96)) shift))
        ((= key 43) (cons (cond (shift 124) ('t 92)) shift))
        ((= key 44) (cons (cond (shift 90) ('t 122)) shift))
        ((= key 45) (cons (cond (shift 88) ('t 120)) shift))
        ((= key 46) (cons (cond (shift 67) ('t 99)) shift))
        ((= key 47) (cons (cond (shift 86) ('t 118)) shift))
        ((= key 48) (cons (cond (shift 66) ('t 98)) shift))
        ((= key 49) (cons (cond (shift 78) ('t 110)) shift))
        ((= key 50) (cons (cond (shift 77) ('t 109)) shift))
        ((= key 51) (cons (cond (shift 60) ('t 44)) shift))
        ((= key 52) (cons (cond (shift 62) ('t 46)) shift))
        ((= key 53) (cons (cond (shift 63) ('t 47)) shift))
        ((= key 55) (cons 42 shift))
        ((or (= key 56) (= key 89)) (cons 'alt shift))
        ((= key 57) (cons 32 shift))
        ((= key 58) (cons 'caps shift))
        ((= key 59) (cons 'F1 shift))
        ((= key 60) (cons 'F2 shift))
        ((= key 61) (cons 'F3 shift))
        ((= key 62) (cons 'F4 shift))
        ((= key 63) (cons 'F5 shift))
        ((= key 64) (cons 'F6 shift))
        ((= key 65) (cons 'F7 shift))
        ((= key 66) (cons 'F8 shift))
        ((= key 67) (cons 'F9 shift))
        ((= key 68) (cons 'F10 shift))
        ((= key 69) (cons 'pause shift))
        ((= key 70) (cons 'scroll_lock shift))
        ((= key 71) (cons (cond (shift 'home) ('t 55)) shift))
        ((= key 72) (cons (cond (shift 'up) ('t 56)) shift))
        ((= key 73) (cons (cond (shift 'pgup) ('t 57)) shift))
        ((= key 74) (cons 45 shift))
        ((= key 75) (cons (cond (shift 'left) ('t 52)) shift))
        ((= key 76) (cons 53 shift))
        ((= key 77) (cons (cond (shift 'right) ('t 54)) shift))
        ((= key 78) (cons 43 shift))
        ((= key 79) (cons (cond (shift 'end) ('t 49)) shift))
        ((= key 80) (cons (cond (shift 'down) ('t 50)) shift))
        ((= key 81) (cons (cond (shift 'pgdn) ('t 51)) shift))
        ((= key 82) (cons (cond (shift 'insert) ('t 48)) shift))
        ((= key 83) (cons (cond (shift 'delete) ('t 46)) shift))
        ((= key 84) (cons 'F11 shift))
        ((= key 85) (cons 'F12 shift))
        ((= key 88) (cons 47 shift))
        ((= key 90) (cons 'num_lock shift))
        ((= key 91) (cons 'home shift))
        ((= key 92) (cons 'up shift))
        ((= key 93) (cons 'pgup shift))
        ((= key 94) (cons 'left shift))
        ((= key 95) (cons 'right shift))
        ((= key 96) (cons 'end shift))
        ((= key 97) (cons 'down shift))
        ((= key 98) (cons 'pgdn shift))
        ((= key 99) (cons 'insert shift))
        ((= key 100) (cons 'delete shift))
        ('t (cons () shift))))
(define (no_keymap key shift)
  (cond ((= key 8) (cons 'backspace shift))
        ((= key 10) (cons 'enter shift))
        ((= key 13) (cons 'enter shift))
        ('t (cons key shift))))
(define keymap no_keymap)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions to perform the main loop of the Operating System ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define process-space 1000)
(define (run-cmd curr_id cmd shift output globals)
  (cond ((equal cmd ":q\n") 0) ;; Quit
        ((equal cmd ":l\n")
         (prompt curr_id (append output gpl-str) shift globals))
        ('t (prompt curr_id (append output help-str) shift globals))))
(define (process-reader-result reader-result read-count id output
                               line shift globals)
  (cond ((function? reader-result)
         (process-input reader-result read-count id output line shift globals))
        ((= (car reader-result) 'error)
         (process-input initial-reader 0 (+ id 1)
                        (append output
                                (print id) ": " (cadr reader-result) "\n\r")
                        "" shift globals))
        ('t (fork id process-space
                  (evaluator id (cadr reader-result) globals)
                  (process-input initial-reader 0 (+ id 1)
                                 output line shift globals)))))
(define (process-input reader read-count id output line shift globals)
  (cond ((pair? line)
         (let ((reader-result (reader (car line)))
               (read-count (cond ((and (= read-count 0) (< (car line) 33))
                                  read-count)
                                 ('t (+ read-count 1)))))
           (process-reader-result reader-result read-count
                                  id output (cdr line) shift globals)))
        ((= read-count 0) (prompt id output shift globals))
        ('t (main id output "" reader read-count shift globals))))
(define (process-key key id output reversed-line reader read-count
                     shift globals)
  (cond ((= key 'backspace)
         (let ((continuation (main id output (cdr reversed-line)
                                   reader read-count shift globals)))
           ;;(if reversed-line (cons 8 continuation) continuation)))
           continuation))
        ((= key 'enter)
         (let ((line ((foldl cons "\n") reversed-line)))
           (cond ((and (= (car line) 58) (= read-count 0))
                  (run-cmd id line shift output globals))
                 ('t (process-input reader read-count
                                    id output line shift globals)))))
        ((number? key)
         (let ((continuation (main id output (cons key reversed-line)
                                   reader read-count shift globals)))
           ;;(cons key continuation)))
           continuation))
        ('t (main id output reversed-line reader read-count shift globals))))
(define (main current-id output current-line reader read-count shift globals)
  (fn (in)
      (cond ((null? in) (main current-id output current-line
                              reader read-count shift globals))
            ((number? in)
             (let (((key . shift) (keymap in shift)))
               (if key
                   (process-key key current-id output current-line reader
                                read-count shift globals)
                   (main current-id output current-line reader read-count
                         shift globals))))
            ((= (cadr in) 'define)
             (main current-id
                   (append output "Define: " (symbol->string (car in)) "\n\r")
                   current-line reader read-count shift
                   (add-global (car in) (caddr in) globals)))
            ((= (cadr in) 'done)
             (main current-id
                   (append output (print (car in)) ": " (caddr in) "\n\r")
                   current-line reader read-count shift globals))
            ('t (main current-id output current-line
                      reader read-count shift globals)))))
(define (prompt current-id output shift globals)
  (append output "expr " (print current-id) "> "
          (main current-id "" "" initial-reader 0 shift globals)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Informational strings  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (build-init-msg space args boot)
  (append "Loaded with " (print space) " free cons cells.\n\r"
          "Arguments: "
          ((foldr (fn (arg line) (append arg " " line)) "\n\r") args)
          boot))
(define help-str (append "Commands:\n\r"
                         "\t:h - display this help menu\n\r"
                         "\t:l - display license information\n\r"
                         "\t:q - quit\n\r"
                         "\t<EXPR> - evaluate the expression <EXPR>\n\r"))
(define release-str "Omar's REPL, release 20120824.\n\r")
(define gpl-str
  (append release-str
          "Copyright (C) 2004 - 2012 by Omar Jarjur"
          "\n\n\rThis program is free software. You can redistribute "
          "it and/or modify it under the terms of version 2 of the "
          "GNU General Public License as published by the Free "
          "Software Foundation."
          "\n\n\rThis program is distributed in the hope that it will "
          "be useful, but WITHOUT ANY WARRANTY; without even the "
          "implied warranty of MERCHANTABILITY or FITNESS FOR A "
          "PARTICULAR PURPOSE. See the GNU General Public License for "
          "more details."
          "\n\n\rYou should have received a copy of the GNU General "
          "Public License along with this program; if not, write to "
          "the Free Software Foundation, Inc., 59 Temple Place, "
          "Suite 330, Boston, MA 02111-1307 USA\n\r"))
(define boot-str
  (append release-str "System running. Type \":h\" for the help menu.\n\r"))

;;;;;;;;;;;;;;;;;
;; Entry point ;;
;;;;;;;;;;;;;;;;;
(fn (space args)
    (prompt 0 (build-init-msg space args boot-str) () initial-globals))
