;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This sample program demonstrates forking a child process. ;;
;; The running program consists of two processes; a child    ;;
;; process that sends the hello-world string to its parent,  ;;
;; and a parent process that simply forwards messages from   ;;
;; its children.                                             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (list . x) x)
(define (rreverse result xs)
  (cond ((atom xs) result)
        ('t (rreverse (cons (car xs) result) (cdr xs)))))
(define (reverse xs) (rreverse () xs))
(define (fork id child continuation)
  (cons (list id 100 child) continuation))

;; The child process
(define (recho line)
  (fn in (cond ((= in 10) (cons (reverse (cons 10 line)) (recho ())))
               (in (recho (cons in line)))
               ('t ()))))
(define (echo space) (recho ()))

;; The parent process. It exits after reading a newline
(define (output line return)
  (cond ((atom line) return)
        ('t (cons (car line) (output (cdr line) return)))))
(define (forward input)
  (cond ((atom input) (cons (list 'echo input) forward))
        ((= (car input) 0) '())
        ('t (output input forward))))

;; The main loop
(define (main space args) (fork 'echo echo forward))
main
