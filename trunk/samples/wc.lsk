;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Sample program implementing the classic 'wc' command ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (unfold test head tail)
  (fn (expr)
      (if (test expr)
          '()
          (cons (head expr) ((unfold test head tail) (tail expr))))))
(define (foldl merge end)
  (fn (list)
      (if (atom list)
          end
          ((foldl merge (merge (car list) end)) (cdr list)))))
(define (foldr merge end)
  (fn (list)
      (if (atom list)
          end
          (merge (car list) ((foldr merge end) (cdr list))))))
(define (append . args) ((foldr (fn (x xs)
                                    (cond ((= xs '()) x)
                                          ('t ((foldr cons xs) x))))
                                '()) args))
(define (number->string expr)
  (cond ((< expr 0) (append "-" (number->string (- expr))))
        ((= expr 0) "0")
        ('t ((foldl (fn (digit str) (cons (+ 48 digit) str)) "")
             ((unfold (fn (num) (= num 0))
                      (fn (num) (% num 10))
                      (fn (num) (/ num 10)))
              expr)))))
(define length (foldl (fn (char length) (+ length 1)) 0))
(define (pad str)
  (if (< (length str) 3)
      (append "  " str)
      (append " " str)))

(define (wc characters words lines inside-a-word)
  (fn (in)
      (cond ((= in 0)
             (append (pad (number->string lines))
                     (pad (number->string words))
                     (pad (number->string characters))
                     "\n"))
            (in (wc (+ characters 1)
                    (if (> in 32)
                        (if inside-a-word words (+ words 1))
                        words)
                    (if (= in 10) (+ lines 1) lines)
                    (> in 32)))
            ('t (wc characters words lines inside-a-word)))))
(fn (space args) (wc 0 0 0 '()))
