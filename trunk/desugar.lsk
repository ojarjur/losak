;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Losak compiler                                                  ;;
;;                                                                 ;;
;; This front-end to the compiler removes syntactic sugar and      ;;
;; warns about potential programming errors.                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Copyright (C) 2004 - 2012 by Omar Jarjur                        ;;
;;                                                                 ;;
;; This program is free software; you can redistribute it and/or   ;;
;; modify it under the terms of version 2 of the GNU General       ;;
;; Public License as published by the Free Software Foundation.    ;;
;;                                                                 ;;
;; This program is distributed in the hope that it will be useful, ;;
;; but WITHOUT ANY WARRANTY; without even the implied warranty of  ;;
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   ;;
;; GNU General Public License for more details.                    ;;
;;                                                                 ;;
;; You should have received a copy of the GNU General Public       ;;
;; License along with this program; if not, write to the Free      ;;
;; Software Foundation, Inc.,                                      ;;
;; 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (print-with-newline expr) (append (print expr) "\n"))

;;;;;;;;;;;;;;;;;;;;
;; Error handling ;;
;;;;;;;;;;;;;;;;;;;;
(define map-to-stderr
  (foldr (fn (char output) (cons (list (cons 2 char)) output)) ()))
(define (print-warnings line-number warnings)
  (cond (warnings (map-to-stderr (append "WARNING; "
                                         "In expression beginning on line "
                                         (print line-number) ": " warnings
                                         "\n")))
        ('t ())))
(define (print-error msg) (map-to-stderr (append "Error; "msg "\n")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions to remove syntactic sugar ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define special-forms
  '(quote quasiquote unquote let if define cond fn))
(define supported-builtins
  '(cons car cdr atom number function = < > + - * / % ~ & | ^ >> >>> <<
         null? number? pair? function?
         symbol? symbol->string string->symbol))
(define (flatten input-tree output-list)
  (cond ((= input-tree '()) output-list)
        ((symbol? input-tree) (cons input-tree output-list))
        ((atom input-tree) (cons input-tree output-list))
        ('t (flatten (car input-tree)
                     (flatten (cdr input-tree) output-list)))))
(define supported-library-procedures
  '(and append apply equal
    foldl foldr id list
    map member not or
    parse-expr print reverse
    caar cadr cdar cddr
    caaar caadr cadar caddr
    cdaar cdadr cddar cdddr
    caaaar caaadr caadar caaddr
    cadaar cadadr caddar cadddr
    cdaaar cdaadr cdadar cdaddr
    cddaar cddadr cdddar cddddr))
(define (escape-symbols expr)
  (cond ((atom expr)
         (cond ((member expr special-forms) expr)
               ((member expr supported-builtins) expr)
               ((member expr supported-library-procedures) expr)
               ((symbol? expr)
                (string->symbol (append "_" (symbol->string expr))))
               ('t expr)))
        ('t (cons (escape-symbols (car expr))
                  (escape-symbols (cdr expr))))))

(define (compile-find var env globals next-id return)
  (cond ((member var (flatten env globals))
         (return '() (escape-symbols var) "" next-id))
        ((member var supported-builtins)
         (return '() var "" next-id))
        ((member var supported-library-procedures)
         (return '() var "" next-id))
        ((member var special-forms)
         (return '() var "" next-id))
        ('t (return '() '()
                    (append "Unknown var \""
                            (symbol->string var)
                            "\" will evaluate to NIL.")
                    next-id))))

(define (rewrite-quote expression)
  (cond ((= expression '()) expression)
        ((number expression) expression)
        ((atom expression) (list 'quote expression))
        ('t (list 'cons
                  (rewrite-quote (car expression))
                  (rewrite-quote (cdr expression))))))
(define (compile-quote expr next-id return)
  (let ((literal-symbol (string->symbol (append "l_" (print next-id)))))
    (return `((define ,literal-symbol ,expr))
            literal-symbol
            ""
            (+ 1 next-id))))
(define (rewrite-quasiquote expression depth env globals next-id return)
  (cond ((number expression) (return '() expression "" next-id))
        ((atom expression)
         (return '() (list 'quote expression) "" next-id))
        ((= (car expression) 'unquote)
         (cond ((= depth 0)
                (compile-expr (cadr expression) env globals next-id return))
               ('t (rewrite-quasiquote (cadr expression) (- depth 1)
                                       env globals next-id
                                       (fn (definitions body warnings next-id)
                                           (return definitions
                                                   (list 'unquote body)
                                                   warnings
                                                   next-id))))))
        ((= (car expression) 'quasiquote)
         (rewrite-quasiquote (cadr expression) (+ depth 1)
                             env globals next-id
                             (fn (definitions body warnings next-id)
                                 (return definitions
                                         (list 'quasiquote body)
                                         warnings
                                         next-id))))
        ('t (let (((car-definitions car-body car-warnings next-id)
                   (rewrite-quasiquote (car expression) depth env globals
                                       next-id list))
                  ((cdr-definitions cdr-body cdr-warnings next-id)
                   (rewrite-quasiquote (cdr expression) depth env globals
                                       next-id list)))
              (return (append car-definitions cdr-definitions)
                      (list 'cons car-body cdr-body)
                      (append car-warnings cdr-warnings)
                      next-id)))))
(define (always-true expr)
  (cond ((symbol? expr) '())
        ((atom expr) expr)
        ((not (= (car expr) 'quote)) '())
        ((= (cdr expr) '()) '())
        ('t 't)))
(define (rewrite-cond cases env globals next-id return)
  (cond ((atom cases) (return '() '() "Unhandled cond default. " next-id))
        ((always-true (caar cases))
         (compile-expr (cadar cases) env globals next-id return))
        ('t (let (((test-definitions test-body test-warnings next-id)
                   (compile-expr (caar cases) env globals
                                 next-id list))
                  ((then-definitions then-body then-warnings next-id)
                   (compile-expr (cadar cases) env globals
                                 next-id list))
                  ((else-definitions else-body else-warnings next-id)
                   (rewrite-cond (cdr cases) env globals
                                 next-id list)))
              (return (append test-definitions
                              then-definitions
                              else-definitions)
                      (list 'if test-body then-body else-body)
                      (append test-warnings
                              then-warnings
                              else-warnings)
                      next-id)))))
(define (rewrite-let bindings expr)
  (cond ((atom bindings) expr)
        ('t (list (list 'fn (list (caar bindings))
                        (rewrite-let (cdr bindings) expr))
                  (cadar bindings)))))
(define (compile-args args env globals next-id return)
  (cond ((atom args) (compile-expr args env globals next-id return))
        ('t (let (((arg-definitions arg-body arg-warnings next-id)
                   (compile-expr (car args) env globals next-id list))
                  ((args-definitions args-body args-warnings next-id)
                   (compile-args (cdr args) env globals next-id list)))
              (return (append arg-definitions args-definitions)
                      (cons arg-body args-body)
                      (append arg-warnings args-warnings)
                      next-id)))))
(define (compile-expr expr env globals next-id return)
  (cond ((symbol? expr) (compile-find expr env globals next-id return))
        ((atom expr) (return '() expr "" next-id))
        ((= (car expr) 'quote) (compile-quote expr next-id return))
        ((= (car expr) 'quasiquote)
         (rewrite-quasiquote (cadr expr) 0 env globals
                             next-id return))
        ((= (car expr) 'unquote)
         (compile-expr (cadr expr) env globals next-id
                       (fn (definitions body warnings next-id)
                           (return definitions
                                   body
                                   (append "Unquote outside of quasiquote"
                                           warnings)
                                   next-id))))
        ((= (car expr) 'cond)
         (rewrite-cond (cdr expr) env globals next-id return))
        ((= (car expr) 'let)
         (compile-expr (rewrite-let (cadr expr) (caddr expr))
                       env globals next-id return))
        ((= (car expr) 'fn)
         (compile-expr (caddr expr) (cons (cadr expr) env)
                       globals next-id
                       (fn (definitions body warnings next-id)
                           (return definitions
                                   (list 'fn (escape-symbols (cadr expr)) body)
                                   warnings
                                   next-id))))
        ('t (compile-args expr env globals next-id return))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Compile expressions to coroutines ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (get-name (line-number . definition))
  (cond ((atom (cadr definition)) (cadr definition))
        ('t (caadr definition))))
(define (get-body (line-number . definition))
  (cond ((atom (cadr definition)) (caddr definition))
        ('t (list 'fn (cdr (cadr definition)) (caddr definition)))))
(define (compile-definition definition globals next-id return)
  (let ((line-number (car definition))
        (name (get-name definition))
        (body (get-body definition)))
    (compile-expr body '() globals next-id
                  (fn (definitions compiled-body warnings next-id)
                      (append (print-warnings line-number warnings)
                              (apply append
                                     (map print-with-newline definitions))
                              (print-with-newline `(define
                                                     ,(escape-symbols name)
                                                     ,compiled-body))
                              (return next-id))))))
(define (compile-definitions definitions globals next-id return)
  (if (atom definitions)
      (return next-id)
      (compile-definition (car definitions) globals next-id
                          (fn (next-id)
                              (compile-definitions (cdr definitions) globals
                                                   next-id return)))))
(define (compile definitions expr line-number)
  (let ((globals (map get-name definitions))
        ((body-definitions body-code warnings next-id)
         (compile-expr expr '() globals 1 list)))
    (compile-definitions definitions globals next-id
                         (fn (next-id)
                             (append (print-warnings line-number warnings)
                                     (apply append
                                            (map print-with-newline
                                                 body-definitions))
                                     (print-with-newline body-code))))))

;;;;;;;;;;;;;;;;;;;;;;;
;; Compile the input ;;
;;;;;;;;;;;;;;;;;;;;;;;
(define (read-expr cont line-number)
  (parse-expr cont (fn (error-message end-line)
                       (print-error (append "Parse error, line "
                                            (print end-line)
                                            ": " error-message "\n")))
              line-number))
(define (compile-source definitions start-line-number)
  (fn (value end-line-number)
    (cond ((not value)
           (print-error "No main expression"))
          ((not (= (car value) 'define))
           (compile (reverse definitions) value start-line-number))
          ((not (or (atom (cadr value)) (atom (caadr value))))
           (print-error "Malformed define statement"))
          ('t (read-expr (compile-source (cons (cons start-line-number value)
                                               definitions)
                                         end-line-number)
                         end-line-number)))))
(fn (size arguments) (read-expr (compile-source '() 1) 1))
