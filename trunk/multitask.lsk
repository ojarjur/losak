;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Losak compiler                                                      ;;
;;                                                                     ;;
;; This first stage of the compiler rewrites the multi-process program ;;
;; into a single process that consists of communicating co-routines.   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (caar x) (car (car x)))
(define (cdar x) (cdr (car x)))
(define (cadr x) (car (cdr x)))
(define (cddr x) (cdr (cdr x)))
(define (caaar x) (car (car (cdr x))))
(define (caadr x) (car (car (cdr x))))
(define (cadar x) (car (cdr (car x))))
(define (caddr x) (car (cdr (cdr x))))

(define (id x) x)
(define (list . args) args)
(define (apply op args) (op . args))
(define (recurse op)
  ((fn (this) (op (fn args ((this this) . args))))
   (fn (this) (op (fn args ((this this) . args))))))
(define (walk head tail test merge ret)
  (fn (tree)
      (cond ((test tree) (ret tree))
            ('t (merge (head tree)
                       ((walk head tail test merge ret)
                        (tail tree)))))))
(define (rreverse list result return)
  (cond ((atom list) (return result))
        ('t (rreverse (cdr list) (cons (car list) result) return))))
(define (reverse list) (rreverse list '() id))
(define (foldl merge end)
  (fn (list)
      (cond ((atom list) end)
            ('t ((foldl merge (merge (car list) end)) (cdr list))))))
(define (foldr merge end)
  (fn (list) (rreverse list '() (foldl merge end))))
(define (append . args) ((foldr (fn (x xs)
                                   (cond ((= xs '()) x)
                                         ('t ((foldr cons xs) x))))
                               '()) args))
(define (equal x y)
        (cond ((atom x) (= x y))
              ((atom y) '())
              ((equal (car x) (car y)) (equal (cdr x) (cdr y)))
              ('t '())))
(define (map op list) ((foldr (fn (x xs) (cons (op x) xs)) '()) list))
(define (or . args) ((foldr (fn (t ts) (cond (t t) ('t ts))) '()) args))
(define (and . args) ((foldr (fn (t ts) (cond (t ts) ('t '()))) 't) args))
(define (not test) (cond (test '()) ('t 't)))
(define (contains eq-test item)
  (foldr (fn (x found) (cond ((eq-test x item) 't) ('t found))) ()))

;;;;;;;;;;;;;;;;;;;;
;; Error handling ;;
;;;;;;;;;;;;;;;;;;;;
(define (error msg rest) (append msg "\nRemaining chars: " rest "\n"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions for maintaining the symbol table ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (make-symbol id str) (fn (op) (op id str)))
(define (symbol->id symbol) (symbol (fn (id str) id)))
(define (symbol->string symbol) (symbol (fn (id str) str)))
(define (symbol-eq s1 s2) (= (symbol->id s1) (symbol->id s2)))
(define (lookup string curr table count return)
  (cond ((atom curr) (return count (cons (cons string count) table)))
        ((equal (caar curr) string) (return (cdar curr) table))
        ('t (lookup string (cdr curr) table (+ count 1) return))))
(define (get-symbol string table return)
  (lookup string table table 10 ;; Symbols 0-9 are reserved for the compiler
          (fn (id new-table) (return (make-symbol id string) new-table))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Helper functions for parsing ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (end-of-line chars)
  (or (atom chars)
      (= (car chars) 10)
      (= (car chars) 13)))
(define (discard-line arg) ((walk car cdr end-of-line (fn (c cs) cs) cdr) arg))

(define (escape-char char return rest symbols line-num)
  (return (cond ((= char 116) 9)
                ((= char 114) 13)
                ((= char 110) 10)
                ('t char))
          rest symbols line-num))
(define (build-num chars return rest symbols line-num)
  (return ((foldl (fn (c n) (+ (* 10 n) (- c 48))) 0) chars)
          rest symbols line-num))
(define (drop-first pair return rest symbols line-num)
  (return (cdr pair) rest symbols line-num))
(define (drop-second pair return rest symbols line-num)
  (return (car pair) rest symbols line-num))
(define (quote-value expr return rest symbols line-num)
  (return (list 'quote expr) rest symbols line-num))
(define (lookup-symbol chars return rest symbols line-num)
  (cond ((equal chars "cond") (return 'cond rest symbols line-num))
        ((equal chars "let") (return 'let rest symbols line-num))
        ((equal chars "fn") (return 'fn rest symbols line-num))
        ((equal chars "quote") (return 'quote rest symbols line-num))
        ((equal chars "cons") (return 'cons rest symbols line-num))
        ((equal chars "car") (return 'car rest symbols line-num))
        ((equal chars "cdr") (return 'cdr rest symbols line-num))
        ((equal chars "atom") (return 'atom rest symbols line-num))
        ((equal chars "number") (return 'number rest symbols line-num))
        ((equal chars "function") (return 'function rest symbols line-num))
        ((equal chars "=") (return '= rest symbols line-num))
        ((equal chars "<") (return '< rest symbols line-num))
        ((equal chars ">") (return '> rest symbols line-num))
        ((equal chars "+") (return '+ rest symbols line-num))
        ((equal chars "-") (return '- rest symbols line-num))
        ((equal chars "*") (return '* rest symbols line-num))
        ((equal chars "/") (return '/ rest symbols line-num))
        ((equal chars "%") (return '% rest symbols line-num))
        ((equal chars "~") (return '~ rest symbols line-num))
        ((equal chars "&") (return '& rest symbols line-num))
        ((equal chars "|") (return '| rest symbols line-num))
        ((equal chars "^") (return '^ rest symbols line-num))
        ((equal chars ">>") (return '>> rest symbols line-num))
        ((equal chars ">>>") (return '>>> rest symbols line-num))
        ((equal chars "<<") (return '<< rest symbols line-num))
        ((equal chars "define") (return 'define rest symbols line-num))
        ('t (get-symbol chars symbols
                        (fn (id new-symbols)
                          (return id rest new-symbols line-num))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Parser combinators that simplify the process of writting an LL(1) ;;
;; grammar.                                                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Each parser takes a return continuation, an error continuation,   ;;
;; an input string, and a symbol table. They implement a function    ;;
;; that parses the string, and passes the tree, remaining chars, and ;;
;; new symbol table to the return, or "fails" and passes a message,  ;;
;; the remaining chars, and new symbol table to the error.           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (fail return error input symbols line-num) (error input symbols))
(define (done return error input symbols line-num)
  (return () input symbols line-num))
(define (pop return error input symbols line-num)
  (cond ((atom input) (error input symbols))
        ((= (car input) 10)
         (return (car input) (cdr input) symbols (+ 1 line-num)))
        ('t (return (car input) (cdr input) symbols line-num))))
(define (check test)
  (fn (return error input symbols line-num)
    (pop (fn (val rest symbols line-num)
             (cond ((test val) (return val rest symbols line-num))
                   ('t (error input symbols))))
         error input symbols line-num)))
(define (match char) (check (fn (val) (= val char))))
(define (default parser) (fn (else) parser))
(define (case test then)
  (fn (else)
    (fn (return error input symbols line-num)
      (test (fn (val rest symbols line-num)
                (then return error rest symbols line-num))
            (fn (rest symbols) (else return error input symbols line-num))
            input symbols line-num))))
(define (choice . args) ((foldr (fn (c cs) (c cs)) fail) args))
(define (post-process parser op)
  (fn (return error input symbols line-num)
    (parser (fn (val rest symbols line-num)
                (op val return rest symbols line-num))
            error input symbols line-num)))
(define (seq parser1 parser2)
  (fn (return error input symbols line-num)
    (parser1 (fn (head next symbols line-num)
               (parser2 (fn (tail rest symbols line-num)
                          (return (cons head tail) rest symbols line-num))
                        error next symbols line-num))
             error input symbols line-num)))
(define (escape parser) (seq (post-process pop escape-char) parser))
(define (use parser) (seq pop parser))
(define (peek parser)
  (fn (return error input symbols line-num)
    (parser (fn (val rest symbols new-line-num)
                (return val input symbols line-num))
            error input symbols line-num)))
(define (interval start end)
  (check (fn (val) (and (> val (- start 1)) (< val (+ end 1))))))
(define (skip parser) (post-process (use parser) drop-first))
(define (first parser1 parser2)
  (post-process (seq parser1 parser2) drop-second))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions to parse an s-expression ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (parse-num . args)
  (apply (choice (case (peek (interval 48 57)) (use parse-num))
                 (default done))
         args))
(define (read-num . args) (apply (post-process parse-num build-num) args))
(define (parse-symbol . args)
  (apply (choice (case (match ()) done)
                 (case (peek (interval 0 32)) done)
                 (case (peek (interval 39 41)) done)
                 (case (peek (match 46)) done)
                 (case (peek (match 59)) done)
                 (default (use parse-symbol)))
         args))
(define (read-symbol . args)
  (apply (post-process parse-symbol lookup-symbol) args))
(define (parse-string . args)
  (apply (choice (case (match 34) done)
                 (case (match 92) (escape parse-string))
                 (default (use parse-string)))
         args))
(define (quote-parser parser) (post-process parser quote-value))
(define (comment parser)
  (recurse (fn (this) (choice (case (match 10) parser)
                              (case (match 13) parser)
                              (default (skip this))))))
(define (parse-paren . args)
  (apply (choice (case (interval 0 32) parse-paren)
                 (case (match 59) (comment parse-paren))
                 (case (match 41) done))
         args))
(define (parse-pair parser)
  (recurse (fn (this)
               (choice (case (interval 0 32) this)
                       (case (match 59) (comment this))
                       (case (match 41) done)
                       (case (match 46) (first parser parse-paren))
                       (default (seq parser this))))))
(define (parse-expr . args)
  (apply (choice (case (interval 0 32) parse-expr)
                 (case (match 34) (quote-parser parse-string))
                 (case (match 39) (quote-parser parse-expr))
                 (case (match 40) (parse-pair parse-expr))
                 (case (match 41) fail)
                 (case (match 46) fail)
                 (case (match 59) (comment parse-expr))
                 (case (peek (interval 48 57)) read-num)
                 (default read-symbol))
         args))
(define (discard-trailing-whitespace parser)
  (first parser
         (choice (case (peek (interval 0 32)) pop)
                 (default done))))
(define (read-expr chars cont symbol-table line-number)
  ((discard-trailing-whitespace parse-expr)
   cont
   (fn (rest symbols) (error "Parse error" rest))
   chars symbol-table line-number))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions to print s-expressions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (build-num-str num)
  ((walk (fn (n) (% n 10))
         (fn (n) (/ n 10))
         (fn (n) (= n 0))
         (fn (d op) (fn (str) (op (cons (+ d 48) str))))
         (fn (x) id))
   num))
(define (print-num num)
  (cond ((< num 0) (cons 45 ((build-num-str (- num)) "")))
        ((= num 0) "0")
        ('t ((build-num-str num) ""))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Since we will be mixing user symbols with compiler symbols, we  ;;
;; need to ensure that there are no naming conflicts when printing ;;
;; the generated program. To do this we print symbols using their  ;;
;; id instead of their name.                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (print-symbol sym) (append "s" (print-num (symbol->id sym))))

(define (print-atom expr)
  (cond ((number expr) (print-num expr))
        ((function expr) (print-symbol expr))
        ((= expr 'quote) "quote")
        ((= expr 'car) "car")
        ((= expr 'cdr) "cdr")
        ((= expr 'number) "number")
        ((= expr 'function) "function")
        ((= expr 'atom) "atom")
        ((= expr 'cons) "cons")
        ((= expr 'cond) "cond")
        ((= expr 'let) "let")
        ((= expr 'fn) "fn")
        ((= expr '>>>) ">>>")
        ((= expr '>>) ">>")
        ((= expr '<<) "<<")
        ((= expr '<) "<")
        ((= expr '>) ">")
        ((= expr '=) "=")
        ((= expr '+) "+")
        ((= expr '-) "-")
        ((= expr '*) "*")
        ((= expr '/) "/")
        ((= expr '%) "%")
        ((= expr '&) "&")
        ((= expr '|) "|")
        ((= expr '^) "^")
        ((= expr '~) "~")
        ((= expr 'define) "define")
        ('t "<INTERNAL ERROR>")))
(define (print_pair head tail-str)
  (let ((closing-string (cond ((= (car tail-str) 41) tail-str)
                              ('t (cons 32 tail-str)))))
    ((append-print closing-string) head)))
(define (print-last tail-str)
  (let ((closing-string (append ")" tail-str)))
    (fn (elem)
        (cond (elem (append " . " ((append-print closing-string) elem)))
              ('t closing-string)))))
(define (append-print tail_str)
  (fn (expr)
      (cond ((= expr ()) (append "()" tail_str))
            ((atom expr) (append (print-atom expr) tail_str))
            ('t (append "("
                        ((walk car cdr atom
                               print_pair
                               (print-last tail_str))
                         expr))))))
(define print (append-print ""))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions supporting code generation ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define t-symbol (make-symbol 0 "t"))
(define arg-symbol (make-symbol 1 "arg"))
(define env-symbol (make-symbol 2 "env"))
(define ret-symbol (make-symbol 3 "ret"))
(define op-symbol (make-symbol 4 "op"))
(define first-symbol (make-symbol 5 "first"))
(define second-symbol (make-symbol 6 "second"))
(define test-symbol (make-symbol 7 "test"))
(define pause-symbol (make-symbol 8 "pause"))

(define (LIT expr)
  (list 'fn (list env-symbol ret-symbol) (list ret-symbol expr)))
(define (QUOTE expr) (LIT (list 'quote expr)))
(define NIL (LIT '()))

(define (PRIMITIVE-OP op)
  (list 'fn (list env-symbol ret-symbol)
        (list ret-symbol (list 'fn (list arg-symbol ret-symbol)
                               (list ret-symbol (cons op arg-symbol))))))

(define ROOT (list 'fn (list env-symbol ret-symbol)
                       (list ret-symbol env-symbol)))
(define (HD env) (list 'fn (list env-symbol ret-symbol)
                       (list pause-symbol
                             (list 'fn '()
                                   (list env (list 'car env-symbol)
                                         ret-symbol)))))
(define (TL env) (list 'fn (list env-symbol ret-symbol)
                       (list pause-symbol
                             (list 'fn '()
                                   (list env (list 'cdr env-symbol)
                                         ret-symbol)))))
(define (FIND var globals return)
  (cond (((contains symbol-eq var) globals)
         (return (list 'fn (list env-symbol ret-symbol) (list ret-symbol var))
                 ""))
        ('t (return NIL (append "Unknown var \""
                                (symbol->string var)
                                "\" will evaluate to NIL. ")))))
(define (IF test then else)
  (list 'fn (list env-symbol ret-symbol)
        (list test env-symbol
              (list 'fn (list test-symbol)
                    (list pause-symbol
                          (list 'fn '()
                                (list (list 'cond (list test-symbol then)
                                                  (list (list 'quote t-symbol)
                                                        else))
                                      env-symbol ret-symbol)))))))
(define (CONS tail)
  (list pause-symbol
        (list 'fn '() (list ret-symbol (list 'cons first-symbol tail)))))
(define (TAIL expr)
  (cond ((equal expr NIL) (CONS ''()))
        ('t (list expr env-symbol
                  (list 'fn (list second-symbol) (CONS second-symbol))))))
(define (PAIR first second)
  (list 'fn (list env-symbol ret-symbol)
        (list first env-symbol
              (list 'fn (list first-symbol) (TAIL second)))))
(define apply-return (list 'fn '() (list op-symbol arg-symbol ret-symbol)))
(define (APPLY op arg)
  (list 'fn (list env-symbol ret-symbol)
        (list arg env-symbol
              (list 'fn (list arg-symbol)
                    (list op env-symbol
                          (list 'fn (list op-symbol)
                                (list pause-symbol apply-return)))))))
(define (LAMBDA body)
  (list 'fn (list env-symbol ret-symbol)
        (list ret-symbol
	      (list 'fn (list arg-symbol ret-symbol)
	      	    (list body (list 'cons arg-symbol env-symbol) ret-symbol)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Compiler from s-expressions to lambda terms ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (is-primitive-op expr)
  (or (= expr 'car) (= expr 'cdr) (= expr 'number) (= expr 'function)
      (= expr 'atom) (= expr 'cons) (= expr '>>>) (= expr '>>)
      (= expr '<<) (= expr '<) (= expr '>) (= expr '=) (= expr '+)
      (= expr '-) (= expr '*) (= expr '/) (= expr '%) (= expr '&)
      (= expr '|) (= expr '^) (= expr '~)))
(define (compile-var var env ret empty)
  (cond ((atom env) (cond ((symbol-eq var env) (ret ROOT))
                          ('t (empty))))
        ('t (compile-var var (car env) (fn (e) (ret (HD e)))
                         (fn () (compile-var var (cdr env)
                                             (fn (e) (ret (TL e)))
                                             empty))))))
(define (compile-find var env globals return)
  (compile-var var env
               (fn (code) (return code ""))
               (fn () (FIND var globals return))))
(define (always-true expr)
  (cond ((function expr) '())
        ((atom expr) expr)
        ((not (= (car expr) 'quote)) '())
        ((= (cdr expr) '()) '())
        ('t 't)))
(define (compile-cond env globals)
  (walk car cdr atom
        (fn (case else)
            (cond ((always-true (car case))
                   (fn (return) (compile-expr (cadr case) env globals return)))
                  ('t (fn (return)
                          (compile-expr
                           (car case) env globals
                           (fn (test-code test-warnings)
                               (compile-expr
                                (cadr case) env globals
                                (fn (then-code then-warnings)
                                    (else (fn (else-code else-warnings)
                                              (return (IF test-code
                                                          then-code
                                                          else-code)
                                                      (append test-warnings
                                                              then-warnings
                                                              else-warnings
                                                      ))))))))))))
        (fn (cases) (fn (return) (return NIL "Unhandled cond default. ")))))
(define (compile-let bindings body env globals return)
  (compile-expr ((walk car cdr atom
                  (fn (binding expr)
                      (list (list 'fn (list (car binding)) expr)
                            (cadr binding)))
                  (fn (bindings) body))
                 bindings)
                env globals return))
(define (compile-args env globals)
  (walk car cdr atom
        (fn (arg arg-list)
            (fn (return)
                (compile-expr arg env globals
                 (fn (arg-code arg-warnings)
                     (arg-list (fn (args-code args-warnings)
                                   (return (PAIR arg-code args-code)
                                           (append arg-warnings
                                                   args-warnings))))))))
        (fn (args) (fn (return) (compile-expr args env globals return)))))
(define (compile-apply op args env globals return)
  (compile-expr op env globals
                (fn (op-code op-warnings)
                    (((compile-args env globals) args)
                     (fn (args-code args-warnings)
                         (return (APPLY op-code args-code)
                                 (append op-warnings args-warnings)))))))
(define (compile-expr expr env globals return)
  (cond ((function expr) (compile-find expr env globals return))
        ((is-primitive-op expr) (return (PRIMITIVE-OP expr) ""))
        ((atom expr) (return (LIT expr) ""))
        ((= (car expr) 'quote) (return (QUOTE (cadr expr)) ""))
        ((= (car expr) 'cond) (((compile-cond env globals) (cdr expr)) return))
        ((= (car expr) 'let)
         (compile-let (cadr expr) (caddr expr) env globals return))
        ((= (car expr) 'fn)
         (compile-expr (caddr expr) (cons (cadr expr) env) globals
                       (fn (body warnings)
                           (return (LAMBDA body) warnings))))
        ('t (compile-apply (car expr) (cdr expr) env globals return))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Compile expressions to coroutines ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (get-name (line-number . definition))
  (cond ((atom (cadr definition)) (cadr definition))
        ('t (caadr definition))))
(define (get-body (line-number . definition))
  (cond ((atom (cadr definition)) (caddr definition))
        ('t (list 'fn (cdr (cadr definition)) (caddr definition)))))
(define return-cont (list 'fn (list arg-symbol) arg-symbol))
(define map-to-stderr
  (foldr (fn (char output) (cons (list (cons 2 char)) output)) ()))
(define (print-warnings line-number warnings)
  (cond (warnings (map-to-stderr (append "WARNING; "
                                         "In expression beginning on line "
                                         (print line-number) ": " warnings
                                         "\n")))
        ('t ())))
(define (compile-definition globals)
  (fn (definition)
      (let ((line-number (car definition))
            (name (get-name definition))
            (body (get-body definition)))
        (compile-expr body '() globals
                      (fn (compiled-body warnings)
                          (append (print-warnings line-number warnings)
                                  "(define "
                                  (print name)
                                  "\n(("
                                  ((append-print
                                    " () finish) run-to-completion))\n")
                                   compiled-body)))))))
(define (compile definitions expr line-number)
  (let ((globals (map get-name definitions))
        (compiled-expr (compile-expr expr '() globals
                                     (fn (code warnings)
                                         (append (print-warnings line-number
                                                                 warnings)
                                                 "(("
                                                 (print code)
                                                 " () finish) main)\n"))))
        (bodies (map (compile-definition globals) definitions)))
    (apply append (cons process-manager-code
                        (append bodies (list compiled-expr))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Output code to perform process I/O ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define process-manager-code
  (append "(define (" (print pause-symbol) " proc)
  (fn (scheduler) (scheduler 'running proc)))
(define (finish val)
  (fn (scheduler) (scheduler 'done val)))
(define (run-to-completion status proc)
  (cond ((= status 'running) ((proc) run-to-completion))
        ('t proc)))
(define (list . args) args)
(define (rreverse list result return)
  (cond ((atom list) (return result))
        ('t (rreverse (cdr list) (cons (car list) result) return))))
(define (foldl merge end)
  (fn (list)
      (cond ((atom list) end)
            ('t ((foldl merge (merge (car list) end)) (cdr list))))))
(define (foldr merge end)
  (fn (list) (rreverse list '() (foldl merge end))))
(define (not test) (cond (test '()) ('t 't)))
(define (or . args) ((foldr (fn (t ts) (cond (t t) ('t ts))) '()) args))
(define (and . args) ((foldr (fn (t ts) (cond (t ts) ('t '()))) 't) args))
(define (equal x y)
        (cond ((atom x) (= x y))
              ((atom y) '())
              ((equal (car x) (car y)) (equal (cdr x) (cdr y)))
              ('t '())))
(define empty-children ())
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TODO: Replace with a real-time FIFO Queue ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define empty-mailbox ())
(define (add-to-mailbox id msg inbox)
  (cond ((atom inbox) (cons msg inbox))
        ('t (cons (car inbox) (add-to-mailbox id msg (cdr inbox))))))
(define (is-mailbox-empty inbox) (atom inbox))
(define (get-message inbox return) (return (car inbox) (cdr inbox)))
(define (add-child (child-id child-mem child) children)
  ((child child-mem finish)
   (fn (status process)
       (cons (list child-id status process empty-mailbox empty-children)
             children))))
(define (add-msg (id status proc inbox children) from-id msg)
  (list id status proc (add-to-mailbox from-id msg inbox) children))
(define (send-child-msg parent-id child-id msg children)
  ((foldr (fn (child children)
             (cons (cond ((equal (car child) child-id)
                          (add-msg child parent-id msg))
                         ('t child))
                   children))
         ())
   children))

(define (main status process)
  (process-return 0 status process empty-mailbox
                  empty-children empty-mailbox write-output))
(define (run-process outbox (id status proc inbox children))
  (process-children children inbox
                    (fn (children inbox)
                        (process-return id status proc inbox
                                        children outbox write-output))))
(define (read-input outbox process)
  (fn (in) (cond (in (run-process outbox (add-msg process () (list in))))
                 ('t (run-process outbox process)))))
(define (write-output outbox process)
  (cond ((atom process) outbox)
        ((is-mailbox-empty outbox)
         (cond ((and (or (= (car (cdr process)) 'done)
                         (= (car (cdr process)) 'blocked))
                     (function (car (cdr (cdr process)))))
                (read-input outbox process))
               ('t (run-process outbox process))))
        ('t (get-message outbox
                         (fn (msg outbox)
			     (cons msg (write-output outbox process)))))))
(define (perform-io msg proc id inbox children outbox return)
  (cond ((atom msg) ;; send message to parent
         (return (add-to-mailbox () msg outbox)
                 (list id 'done proc inbox children)))
        ((atom (cdr msg)) ;; send message to parent
         (return (add-to-mailbox () (car msg) outbox)
                 (list id 'done proc inbox children)))
        ((atom (cdr (cdr msg))) ;; send message to child
         (return outbox (list id 'done proc inbox
                              (send-child-msg id (car msg)
                                              (car (cdr msg))
                                              children))))
        ('t ;; add new child
         (return outbox (list id 'done proc inbox (add-child msg children))))))
(define (process-children children inbox return)
  (((foldr (fn (child return)
               (fn (children inbox)
                   (process-child child inbox children return)))
           return)
    children)
   () inbox))
(define (process-child child outbox children return)
  (process-tree child outbox
                (fn (outbox child)
                    (cond ((atom child) (return children outbox))
                          ('t (return (cons child children) outbox))))))
(define (process-tree (id status process inbox children) outbox return)
  (process-children children inbox
                    (fn (children inbox)
                        (process-return id status process inbox
                                        children outbox return))))
(define (process-return id status process inbox children outbox return)
  (cond ((= status 'running)
         ((process)
          (fn (status process)
              (return outbox (list id status process inbox children)))))
        ((function process)
         (cond ((is-mailbox-empty inbox)
                (return outbox (list id 'blocked process inbox children)))
               ('t (get-message inbox
                                (fn (msg inbox)
                                    ((process msg finish)
                                     (fn (status new-process)
                                         (return outbox
                                                 (list id status new-process
                                                       inbox children)))))))))
        ((atom process) (return outbox process))
        ('t (perform-io (car process) (cdr process)
                        id inbox children outbox return))))
\n"))

;;;;;;;;;;;;;;;;;;;;;;;
;; Compile the input ;;
;;;;;;;;;;;;;;;;;;;;;;;
(define (input-finished? input-chars)
  (cond ((= input-chars '()) 't)
        ((< (car input-chars) 32) (input-finished? (cdr input-chars)))
        ('t '())))
(define (compile-source definitions start-line-number)
  (fn (value remaining-chars symbol-table end-line-number)
    (cond ((input-finished? remaining-chars)
           (compile (reverse definitions) value start-line-number))
          ((not (= (car value) 'define))
           (error "Remaining input" remaining-chars))
          ((not (or (atom (cadr value)) (atom (caadr value))))
           (error "Malformed define statement" remaining-chars))
          ('t (read-expr remaining-chars
                         (compile-source (cons (cons start-line-number value)
                                               definitions)
                                         end-line-number)
                         symbol-table
                         end-line-number)))))
(define (compile-input input-chars)
  (read-expr input-chars (compile-source '() 1) '() 1))
(define (build-input-list inputs return)
  (fn (next-input)
    (cond ((= next-input 0) (return (reverse inputs)))
          (next-input (build-input-list (cons next-input inputs) return))
          ('t (build-input-list inputs return)))))
(fn (size arguments) (build-input-list '() compile-input))
