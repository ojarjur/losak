;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Losak compiler                                                  ;;
;;                                                                 ;;
;; This intermediated-stage of the compiler builds a compile-time  ;;
;; symbol table and adds primitives for converting between symbols ;;
;; and strings. The actual primitives that are defined here are:   ;;
;;   symbol?                                                       ;;
;;   symbol->string                                                ;;
;;   string->symbol                                                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Copyright (C) 2004 - 2012 by Omar Jarjur                        ;;
;;                                                                 ;;
;; This program is free software; you can redistribute it and/or   ;;
;; modify it under the terms of version 2 of the GNU General       ;;
;; Public License as published by the Free Software Foundation.    ;;
;;                                                                 ;;
;; This program is distributed in the hope that it will be useful, ;;
;; but WITHOUT ANY WARRANTY; without even the implied warranty of  ;;
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   ;;
;; GNU General Public License for more details.                    ;;
;;                                                                 ;;
;; You should have received a copy of the GNU General Public       ;;
;; License along with this program; if not, write to the Free      ;;
;; Software Foundation, Inc.,                                      ;;
;; 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;
;; Error handling ;;
;;;;;;;;;;;;;;;;;;;;
(define map-to-stderr
  (foldr (fn (char output) (cons (list (cons 2 char)) output)) ()))
(define (print-error msg) (map-to-stderr (append "Error; "msg "\n")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions for maintaining the symbol table ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (generate-unused-symbol-name symbols initial-symbol-name)
  (if (member (string->symbol initial-symbol-name) symbols)
      (generate-unused-symbol-name symbols
                                   (append "_" initial-symbol-name))
      initial-symbol-name))
(define (build-string->symbol-cases symbols symbol-tag prefix suffix)
  (if (atom symbols)
      (append prefix "(cons '" symbol-tag " chars)" suffix)
      (let ((next-symbol-string (print (car symbols))))
        (append prefix
                "(if (equal chars \"" next-symbol-string "\")"
                prefix
                "    '" next-symbol-string
                (build-string->symbol-cases (cdr symbols)
                                            symbol-tag
                                            (append prefix "    ")
                                            (append ")" suffix))))))
(define (build-string->symbol symbols symbol-tag)
  (append "(define string->symbol\n"
          "  (fn (chars)\n"
          (build-string->symbol-cases symbols symbol-tag "\n      " "))\n")))
(define (build-symbol->string-cases symbols prefix suffix)
  (if (atom symbols)
      (append prefix "'()" suffix)
      (let ((next-symbol-string (print (car symbols))))
        (append prefix
                "(if (= symbol '" next-symbol-string ")"
                prefix
                "    \"" next-symbol-string "\""
                (build-symbol->string-cases (cdr symbols)
                                            (append prefix "    ")
                                            (append ")" suffix))))))
(define (build-symbol->string symbols symbol-tag)
  (append "(define symbol->string\n"
          "  (fn (symbol)\n"
          "    (if (atom symbol)\n"
          (build-symbol->string-cases symbols "\n        " "\n")
          "        (if (equal (car symbol) '" symbol-tag ")\n"
          "            (cdr symbol)\n"
          "            '()))))\n"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions to insert symbol-handling ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (escape-args args)
  (if (atom args)
      (escape-symbols args)
      (cons (escape-symbols (car args))
            (escape-args (cdr args)))))
(define (escape-symbols expr)
  (cond ((= expr 'atom) '_atom)
        ((= expr '=) '_=)
        ((= expr 'equal) '_equal)
        ((= expr 'symbol?) '_symbol?)
        ((= expr 'pair?) '_pair?)
        ((symbol? expr)
         (if (= (car (symbol->string expr)) 95) ;; Underscore
             (string->symbol (cons 95 (symbol->string expr)))
             expr))
        ((atom expr) expr)
        ((= (car expr) 'quote) expr)
        ('t (escape-args expr))))
(define (list-symbols expression result)
  (cond ((symbol? expression)
         (if (member expression result)
             result
             (cons expression result)))
        ((atom expression) result)
        ('t (list-symbols (car expression)
                          (list-symbols (cdr expression) result)))))
(define (find-quoted-symbols expressions result)
  (cond ((atom expressions) result)
        ((= (car expressions) 'quote)
         (list-symbols (cadr expressions) result))
        ('t ((foldr (fn (expression result)
                        (find-quoted-symbols expression result))
                    result)
             expressions))))
(define (compile definitions expr symbols)
  (if (or (member 'symbol->string symbols)
          (member 'string->symbol symbols)
          (member 'symbol? symbols))
      (let ((symbol-tag (generate-unused-symbol-name symbols "symbol-tag"))
            (quoted-symbols (find-quoted-symbols (cons expr definitions) '())))
        (append "(define equal\n"
                "  (fn (x y)\n"
                "    (if (atom x)\n"
                "        (= x y)\n"
                "        (if (atom y)\n"
                "            '()\n"
                "            (if (equal (car x) (car y))\n"
                "                (equal (cdr x) (cdr y))\n"
                "                '())))))\n"
                (build-symbol->string quoted-symbols symbol-tag)
                (build-string->symbol quoted-symbols symbol-tag)
                "(define _symbol?\n"
                "  (fn (expr)\n"
                "    (if (= expr '())\n"
                "        '()\n"
                "        (if (number expr)\n"
                "            '()\n"
                "            (if (function expr)\n"
                "                '()\n"
                "                (if (atom expr)\n"
                "                    't\n"
                "                    (if (= (car expr) '" symbol-tag ")\n"
                "                        't\n"
                "                        '())))))))\n"
                "(define _pair?\n"
                "  (fn (expr)\n"
                "    (if (atom expr)\n"
                "        '()\n"
                "        (if (= (car expr) '" symbol-tag ")\n"
                "            '()\n"
                "            't))))\n"
                "(define _atom\n"
                "  (fn (expr)\n"
                "    (if (atom expr)\n"
                "        't\n"
                "        (if (= (car expr) '" symbol-tag ")\n"
                "            't\n"
                "            '()))))\n"
                "(define _=\n"
                "  (fn (x y)\n"
                "    (if (_atom x)\n"
                "        (equal x y)\n"
                "        '())))\n"
                (apply append (map print
                                   (map escape-symbols definitions)))
                (print (escape-symbols expr))))
      (append (apply append (map print definitions))
              (print expr))))

;;;;;;;;;;;;;;;;;;;;;;;
;; Compile the input ;;
;;;;;;;;;;;;;;;;;;;;;;;
(define (read-expr cont line-number)
  (parse-expr cont (fn (error-message end-line)
                       (print-error (append "Parse error, line "
                                            (print end-line)
                                            ": " error-message "\n")))
              line-number))
(define (compile-source definitions start-line-number symbols)
  (fn (value end-line-number)
      (cond ((not value)
             (print-error "No main expression"))
            ((not (= (car value) 'define))
             (compile (reverse definitions)
                      value
                      (list-symbols value symbols)))
            ((not (or (atom (cadr value)) (atom (caadr value))))
             (print-error "Malformed define statement"))
            ('t (read-expr (compile-source (cons value definitions)
                                           end-line-number
                                           (list-symbols value symbols))
                           end-line-number)))))
(fn (size arguments) (read-expr (compile-source '() 1 '()) '() 1))
